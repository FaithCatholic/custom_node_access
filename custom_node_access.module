<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * @file
 * Contains custom_node_access.module.
 */

define('CUSTOM_NODE_ACCESS_GRANT_ALL', 42);

/**
 * Implements hook_entity_access().
 *
 * Forces private files embedded into nodes to load for authenticated users, since nodes with
 * grants don't seem to grant embedded private files access for some reason.
 */
function custom_node_access_entity_access($entity, $operation, $account) {
  $roles = $account->getRoles();
  $type = $entity->getEntityTypeId();
  $path = \Drupal::service('path.current')->getPath();
  if ($type === 'node' && $path === '/system/files' && in_array('authenticated', $roles)) {
    return AccessResult::allowed();
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 */
function custom_node_access_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // @todo, is there a way to automatically add this field to all nodes?
  if (array_key_exists('field_access', $form)) {
    if ($form['field_access']) {
      $node = $form_state->getFormObject()->getEntity();
      $form['access_settings'] = array(
        '#access' => \Drupal::currentUser()->hasPermission('edit custom node access'),
        '#description' => t('Limit viewing access to specific user roles.'),
        '#group' => 'advanced',
        '#title' => t('User role access'),
        '#type' => 'details',
        '#weight' => -1,
      );
      $form['field_access']['#group'] = 'access_settings';
    }
  }
}

function custom_node_access_node_grants(AccountInterface $account, $op) {
  $path = \Drupal::service('path.current')->getPath();
  $nid = substr($path, strrpos($path, '/') + 1);

  if (is_numeric($nid)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

    if (is_object($node) && $node->hasField('field_access')) {
      $access = $node->get('field_access')->getValue();

      if (is_array($access)) {
        $custom_node_access_view_roles = $access[0]['custom_node_access_view_roles'];

        if ($custom_node_access_view_roles) {
          $custom_node_access_view_roles = explode(',', $custom_node_access_view_roles);
        }

        $roles = $account->getRoles();
        $grants = array();

        if (is_array($custom_node_access_view_roles)) {
          if ($op == 'view' && array_intersect($custom_node_access_view_roles, $roles)) {
            $grants['custom_node_access_view'] = array(CUSTOM_NODE_ACCESS_GRANT_ALL);
          }
        }

        return $grants;
      }
    }
  }
}

function custom_node_access_node_access_records(NodeInterface $node)  {
  if ($node->hasField('field_access')) {
    $access = $node->get('field_access')->getValue();
    if (is_array($access)) {
      $custom_node_access_view_roles = $access[0]['custom_node_access_view_roles'];
    }
    if ($custom_node_access_view_roles) {
      $grants = array();
      $grants[] = [
        'realm' => 'custom_node_access_view',
        'gid' => CUSTOM_NODE_ACCESS_GRANT_ALL,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
      return $grants;
    }
  }
}
