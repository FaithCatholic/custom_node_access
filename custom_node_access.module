<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * @file
 * Contains custom_node_access.module.
 */

define('CUSTOM_NODE_ACCESS_GRANT_ALL', 42);

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 */
function custom_node_access_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // @todo, is there a way to automatically add this field to all nodes?
  if ($form['field_access']) {
    $node = $form_state->getFormObject()->getEntity();
    $form['access_settings'] = array(
      '#description' => t('Grant user roles special access to this content.'),
      '#group' => 'advanced',
      '#title' => t('User role access'),
      '#type' => 'details',
      '#weight' => -1,
    );
    $form['field_access']['#group'] = 'access_settings';
  }
}

function custom_node_access_node_grants(AccountInterface $account, $op) {
  $path = \Drupal::service('path.current')->getPath();
  $params = Url::fromUri("internal:" . $path)->getRouteParameters();
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($params['node']);

  // @todo clean this up
  if ($node && $node->hasField('field_access')) {
    $access = $node->get('field_access')->getValue();
    if (is_array($access)) {
      $custom_node_access_view_roles = $access[0]['custom_node_access_view_roles'];
      // $custom_node_access_edit_roles = $access[0]['custom_node_access_edit_roles'];
      // $custom_node_access_author_roles = $access[0]['custom_node_access_author_roles'];
      if ($custom_node_access_view_roles) {
        $custom_node_access_view_roles = explode(',', $custom_node_access_view_roles);
      }
      // if ($custom_node_access_edit_roles) {
      //   $custom_node_access_edit_roles = explode(',', $custom_node_access_edit_roles);
      // }
      // if ($custom_node_access_author_roles) {
      //   $custom_node_access_author_roles = explode(',', $custom_node_access_author_roles);
      // }
    }
  }

  $roles = $account->getRoles();

  $grants = array();
  // if ($account->id() > 0) {
  //   $grants['custom_node_access_author'] = array($account->id());
  // }
  if ($op == 'view' && array_intersect($custom_node_access_view_roles, $roles)) {
    $grants['custom_node_access_view'] = array(CUSTOM_NODE_ACCESS_GRANT_ALL);
  }
  // if (($op == 'update' && array_intersect($custom_node_access_edit_roles, $roles)) || ($op == 'delete' && array_intersect($custom_node_access_author_roles, $roles))) {
  //   $grants['custom_node_access_edit'] = array(CUSTOM_NODE_ACCESS_GRANT_ALL);
  // }
  return $grants;
}

function custom_node_access_node_access_records(NodeInterface $node)  {
  if ($node->hasField('field_access')) {
    $access = $node->get('field_access')->getValue();
    // @todo clean this up
    if (is_array($access)) {
      $custom_node_access_view_roles = $access[0]['custom_node_access_view_roles'];
      // $custom_node_access_edit_roles = $access[0]['custom_node_access_edit_roles'];
      // $custom_node_access_author_roles = $access[0]['custom_node_access_author_roles'];
    }
    // if ($custom_node_access_view_roles || $custom_node_access_edit_roles || $custom_node_access_author_roles) {
    if ($custom_node_access_view_roles) {
      $grants = array();
      $grants[] = [
        'realm' => 'custom_node_access_view',
        'gid' => CUSTOM_NODE_ACCESS_GRANT_ALL,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
      // $grants[] = [
      //   'realm' => 'custom_node_access_edit',
      //   'gid' => CUSTOM_NODE_ACCESS_GRANT_ALL,
      //   'grant_view' => 1,
      //   'grant_update' => 1,
      //   'grant_delete' => 1,
      //   'priority' => 0,
      // ];
      // if ($node->getOwnerId()) {
      //   $grants[] = [
      //     'realm' => 'custom_node_access_author',
      //     'gid' => $node->getOwnerId(),
      //     'grant_view' => 1,
      //     'grant_update' => 1,
      //     'grant_delete' => 1,
      //     'priority' => 0,
      //   ];
      // }
      return $grants;
    }
  }
}
